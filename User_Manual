""" Muhammet ALGAN - AdvancedNetScanner-With-AutoExploitCheck-CVE-ExploitDB """

1- `check_exploits(application, version)`: Checks for potential exploits in the Exploit Database for a given application and version. 
This function sends an HTTP request to perform a search on the Exploit Database website using the provided application and version. 
It then checks the response to determine if any known exploits are found. If no exploits are found, it prints "No known exploits found for {application} {version}". 
If exploits are found, it prints "Potential exploits found for {application} {version}". You can further process the response as needed.

2- `perform_vulnerability_scan(target_ip)`: Performs a vulnerability scan for the specified target IP address. 
This function implements the logic for vulnerability scanning for a specific target IP address.
For example, it sends an HTTP request to the `cve.mitre.org` website to retrieve CVE (Common Vulnerabilities and Exposures) information related to the specified IP address.
The obtained data is processed, and any vulnerabilities found are displayed.

3- `get_installed_applications()`: Retrieves a list of installed applications on the system. This function uses the "dpkg-query" command to fetch the names and versions of 
packages installed on Linux systems. It formats the output and returns a list. For example, it may return [["package1", "version1"], ["package2", "version2"], ...].

4- `scan_ports(target_ip, start_port, end_port)`: Performs a port scan on the specified target IP address within the given port range and identifies open ports.
This function uses the `scapy` library to construct an IP packet with a TCP segment and sends a SYN packet to the target IP address for each port in the specified range.
If the target device responds with a SYN-ACK packet, the port is considered open and added to the list. It also performs service banner grabbing by sending another
SYN packet and capturing the response to retrieve the service banner information, which is then printed.

5- `detect_os(target_ip)`: Detects the operating system of the specified target IP address. This function uses an ICMP packet to check the TTL (Time To Live) value.
It tries to infer the operating system of the target device based on the TTL value. For example, Windows systems often respond with TTL values of 128 or 64, while Linux
systems typically respond with TTL values of 64 or 32.



Finally, automation and reporting features have been added. Open ports and exploitable applications can be reported, and the results can be saved to a file. 
These sections are included at the end of the code.

Please note that this code assumes a Debian-based system and uses the dpkg-query command for retrieving installed application information.
If you are using a different operating system, you may need to modify the code to use the appropriate commands or package managers.




